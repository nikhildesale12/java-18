The object finalization is unpredictable and dangerous; read this and this.

Object.java

  // deprecated since Java 9
  @Deprecated(since="9", forRemoval=true)
  protected void finalize() throws Throwable { }

This JEP deprecates (again?) finalization for removal in the future release. In Java 18, we can use the command-line option --finalization=disabled to disable finalization. The finalization remains enabled by default;

Review the below try-finally code; if the copy throws an exception, or the output.close(); throws an exception, then the input will never close and cause the resource to leak.

JEP421.java

package com.mkyong.java18.jep421;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class JEP421 {

  public static void main(String[] args) throws IOException {

      String file1 = "/Home/mkyong/file1";
      String file2 = "/Home/mkyong/file1";

      FileInputStream input = null;
      FileOutputStream output = null;
      try {
          input = new FileInputStream(file1);
          output = new FileOutputStream(file2);

          // copy files from file1 to file 2

          output.close();
          output = null;
          input.close();
          input = null;
      } finally {
          if (output != null) output.close();
          if (input != null) input.close();
      }

  }

}

The better solution is to use Java 7 try-with-resources to properly open and close the resources.


      try (FileInputStream input = new FileInputStream(file1);
           FileOutputStream output = new FileOutputStream(file2)) {
          // copy files from file1 to file 2
      }